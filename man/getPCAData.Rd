% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getPCAData.R
\name{getPCAData}
\alias{getPCAData}
\title{Get PCA Data}
\usage{
getPCAData(
  data,
  outcome = colnames(data)[1],
  unit = colnames(data)[5],
  repeatedUniqueId = NULL,
  rCheckVals = NULL,
  nPCs = 3,
  agents_df = as.data.frame(expand.grid(unique(data[, 4]), unique(data[, 4]))),
  xRange = NULL,
  yRange = NULL,
  edgeCorrection = "isotropic",
  nbasis = 21,
  silent = F
)
}
\arguments{
\item{data}{Dataframe with column titles for at least outcome, x, y, agents,
and unit. For consistency (and avoiding errors), use that order.
Additionally, repeatedUniqueId can be added.}

\item{outcome}{(Optional) String of the column name in data indicating the
outcome or response. Default is the 1st column.}

\item{unit}{(Optional) String of the column name in data indicating a unit or
base thing. Note this unit may have repeated measures. Default is the 4th
column.}

\item{repeatedUniqueId}{(optional) String of the column name in data
indicating the unique ID when using repeated measures.}

\item{rCheckVals}{(optional) numeric vector indicating the radius to check.
Note, if note specified, this could take a lot of memory, particularly
with many units and repeated measures.}

\item{nPCs}{(optional) Numeric indicating the number of principal components}

\item{agents_df}{(optional) Two-column data.frame. The first for agents 1
and the second for agent 2. Both should be in data agents column. This
determines which K functions to compute. Default is to compute all, but
may be misspecified if data in different order.}

\item{xRange}{(optional) two value numeic vector indicating the min and max
x values. Note this is re-used for all images. The default just takes
the min and max x from each image. This allows different sized images,
but note that the edges are defined by some cell.}

\item{yRange}{(optional) two value numeic vector indicating the min and max
y values. Note this is re-used for all images. The default just takes
the min and max y from each image. This allows different sized images,
but note that the edges are defined by some cell.}

\item{edgeCorrection}{(optional) String indicating type of edgeCorrection to
use in spatStat for computation of K functions.}

\item{nbasis}{(optional) Numeric indicating number of basis functions to fit
K functions in order to compute PCA.}

\item{silent}{(optional) Boolean indicating if progress should be printed}
}
\value{
Data.frame with the outcome, unit and principle components of
computed K functions.
}
\description{
This function computes K functions from PP data then converts it into PCs.
Note, if there are repeated measures, i.e. multiple images per unit,
the K functions will be (weighted) averaged together based on the number
of agent1s.
}
\examples{

data_list_NA <- simulatePP_PCA_Meta(
                   AB_Effect = FALSE,
                   age_Effect = FALSE,
                   imagesPerPerson = 5,
                   peoplePerStage = 10)
data <- data_list_NA[[2]]
data <- data[!(data$cellType=='B' & data$Person=='p1'),]
data <- data[!(data$cellType=='B' & data$Person=='p4'),]
data <- data[!(data$cellType=='B' & data$Image=='6'),]
agents_df_tmp <- as.data.frame(expand.grid(
                       unique(data$cellType),
                       unique(data$cellType),stringsAsFactors=F))
agents_df_tmp[5,] <- c('C','C')
dat_pca <- getPCAData(data = data, outcome = 'Stage', unit = 'Person',
                      repeatedUniqueId = 'Image',
                      rCheckVals = seq(0,0.25,0.01), nPCs = 3,
                      agents_df = agents_df_tmp )
}
