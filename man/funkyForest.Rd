% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/funkyForest.R
\name{funkyForest}
\alias{funkyForest}
\title{Compute Random Forest for Data with multiple PC (Along With Meta-Variables)}
\usage{
funkyForest(
  data,
  outcome = colnames(data)[1],
  unit = colnames(data)[2],
  repeatedId = NULL,
  nTrees = 500,
  varImpPlot = TRUE,
  metaNames = NULL,
  keepModels = TRUE,
  varSelPercent = 0.8,
  method = "class"
)
}
\arguments{
\item{data}{Data.frame of outcome and predictors (PCs and meta-variables).
Note, currently Unit or repeated measures should not be included.
Generally use the results from getPCAData, potentially with meta-
variables attached.}

\item{outcome}{(Optional) String indicating the outcome column name in data.
Default is the first column of data.}

\item{unit}{(Optional) String indicating the unit column name in data.
Default is the second column of data.}

\item{repeatedId}{(Optional) String indicating the repeated measure column
name in data (if present). Default is NULL indicating no repeated measures.}

\item{nTrees}{(Optional) Numeric indicating the number of trees to use in the
random forest model. Default is 500.}

\item{varImpPlot}{(Optional) Boolean indicating if variable importance plots
should also be returned with the model. Default is TRUE.}

\item{metaNames}{(Optional) Vector with the column names of data that
correspond to metavariables. Default is NULL.}

\item{keepModels}{(Optional) Boolean indicating if the individual models
should be kept. Can get large in size. Default is TRUE.}

\item{varSelPercent}{Numeric in (0,1) indicating (approx) percentage of
features to keep for each tree.}

\item{method}{(Optional) Method for rpart tree to build random forest. Default
is "class".}
}
\value{
A list with  entries
\enumerate{
\item varImportanceData: Data.frame for variable importance
information.
\item (Optional) model: List of CART that builds the random forest model.
\item (Optional) varImportancePlot: Variable importance plots.
}
}
\description{
This function creates a random forest model for data with PCs and
meta-variables. This includes proper combination for variable importance.
Recommend to users to use randomForest_CVPC in general and perhaps just
this for a final model
}
\examples{
data <- simulatePP(
  cellVarData =
    data.frame(
      "stage" = c(0, 1),
      "A" = c(0, 0),
      "B" = c(1 / 100, 1 / 500)
    ),
  cellKappaData = data.frame(
    "cell" = c("A", "B"),
    "clusterCell" = c(NA, "A"),
    "kappa" = c(6, 5)
  ),
  peoplePerStage = 5,
  imagesPerPerson = 1
)
pcaData <- getPCAData(
  data = data, repeatedUniqueId = "Image",
  xRange = c(0, 1), yRange = c(0, 1)
)
RF <- funkyForest(data = pcaData[-2])

\dontrun{
data <- simulatePP(
  cellVarData =
    data.frame(
      "stage" = c(0, 1),
      "A" = c(0, 0),
      "B" = c(1 / 100, 1 / 500),
      "C" = c(1 / 500, 1 / 250),
      "D" = c(1 / 100, 1 / 100),
      "E" = c(1 / 500, 1 / 500)
    ),
  cellKappaData = data.frame(
    "cell" = c("A", "B", "C", "D", "E"),
    "clusterCell" = c(NA, "A", "B", "C", NA),
    "kappa" = c(6, 3, 2, 1, 4)
  ),
  peoplePerStage = 2,
  imagesPerPerson = 1
)
pcaData <- getPCAData(
  data = data, repeatedUniqueId = "Image",
  xRange = c(0, 1), yRange = c(0, 1)
)
RF1 <- funkyForest(data = pcaData[-2])

pcaMeta <- simulateMeta(pcaData)
RF2 <- funkyForest(pcaMeta[-2],
  metaNames = c(
    "randUnif", "randBin", "rNorm",
    "corrUnif", "corrBin", "corrNorm"
  )
)
}
}
