% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulateData.R
\name{simulateMeta}
\alias{simulateMeta}
\title{Simulate Meta Variables}
\usage{
simulateMeta(
  pcaData,
  outcome = colnames(pcaData)[1],
  metaInfo = data.frame(var = c("randUnif", "randBin", "rNorm", "corrUnif", "corrBin",
    "corrNorm"), rdist = c("runif", "rbinom", "rnorm", "runif", "rbinom", "rnorm"),
    Stage_0 = c("0.5", "0.5", "1", "0.5", "0.6", "1"), Stage_1 = c("0.5", "0.5", "1",
    "0.75", "0.65", "1.5"), Stage_2 = c("0.5", "0.5", "1", "0.95", "0.75", "1.5"))
)
}
\arguments{
\item{pcaData}{Data.frame with the outcome, unit and principle components of
computed K functions.}

\item{outcome}{(Optional) Column title for the outcome in the pcaData.}

\item{metaInfo}{(Optional) Data.frame indicating the metavariables to
include.

The data.frame has a var column, rdist column, and columns for each outcome.
The var column names the meta-variables, rdist indicates the distribution
(the options as runif, rbinom, and rnorm), and each outcome. column gives
the expected value (must be positive) of the random variables for each
outcome.

In order to allow designation of the expected values, the following rules are
imposed on each distribution:
\itemize{
\item runif: a=0, so b is modified,
\item rbinom: n=1, so this defines the probability
\item runif: the standard deviation is set to 1
}}
}
\value{
Data.frame with the outcome, unit, principle components of
computed K functions, and the meta-variables. pcaData with appended
appended columns at the end.
}
\description{
This function simulates meta-variables to append to pca data.
}
\details{
Notes: runif may induce useless information so don't recommend correlating it
}
\examples{
data <- simulatePP(
  cellVarData = data.frame(
    "stage" = c(0, 1, 2),
    "A" = c(0, 0, 0),
    "B" = c(1 / 100, 1 / 500, 1 / 1000)
  ),
  cellKappaData = data.frame(
    "cell" = c("A", "B"),
    "clusterCell" = c(NA, "A"),
    "kappa" = c(10, 3)
  ),
  peoplePerStage = 5,
  imagesPerPerson = 1
)
pcaData <- getPCAData(
  data = data, repeatedUniqueId = "Image",
  xRange = c(0, 1), yRange = c(0, 1)
)
pcaMeta <- simulateMeta(pcaData)
}
