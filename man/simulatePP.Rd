% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulateData.R
\name{simulatePP}
\alias{simulatePP}
\title{Simulate a Point Processes}
\usage{
simulatePP(
  cellVarData = data.frame(stage = c(0, 1, 2), A = c(0, 0, 0), B = c(1/100, 1/500,
    1/500), C = c(1/500, 1/250, 1/100), D = c(1/100, 1/100, 1/100), E = c(1/500, 1/500,
    1/500), F = c(1/250, 1/250, 1/250)),
  cellKappaData = data.frame(cell = c("A", "B", "C", "D", "E", "F"), clusterCell = c(NA,
    "A", "B", "C", NA, "A"), kappa = c(20, 5, 4, 2, 15, 5)),
  peoplePerStage = 20,
  imagesPerPerson = 5,
  silent = FALSE
)
}
\arguments{
\item{cellVarData}{(Optional) Data.frame describing variances with each agent
type.

The data.frame has a stage column and a named column for each agent type.
Currently, these names are mandatory.}

\item{cellKappaData}{(Optional) Data.frame describing cell interactions.

The data.frame has a cell column giving agent names (matching cellVarData),
a clusterCell column indicating which agent the agent clusters (put NA
if the agent doesn't cluster or clusters a hidden agent / self-clusters),
and a kappa column directing the number of agents of per image.}

\item{peoplePerStage}{(Optional) Numeric indicating the number of units per
outcome.}

\item{imagesPerPerson}{(Optional) Numeric indicating the number of repeated
measures.}

\item{silent}{(Optional) Boolean indicating if progress output should be
printed.}
}
\value{
Data.frame containing each point the defined patterns.

The data.frame has columns for outcome, x coordinate, y coordinate, agent
type, unit, and unique repeated measure id.
}
\description{
This function simulates a point pattern with optional clustering ( visible
and invisible). Multiple outcomes, people, and repeated measure are
possible.
}
\details{
Upcoming: cellVarData unnamed. Rename to general names (agent, unit, etc.)
}
\examples{
\dontrun{
data <- simulatePP()
}
data <- simulatePP(
  cellVarData = data.frame(
    "stage" = c(0, 1),
    "A" = c(0, 0),
    "B" = c(1 / 100, 1 / 500),
    "C" = c(1 / 500, 1 / 250),
    "D" = c(1 / 100, 1 / 100),
    "E" = c(1 / 500, 1 / 500)
  ),
  cellKappaData = data.frame(
    "cell" = c("A", "B", "C", "D", "E"),
    "clusterCell" = c(NA, "A", "B", "C", NA),
    "kappa" = c(10, 3, 2, 1, 8)
  ),
  peoplePerStage = 4,
  imagesPerPerson = 1
)
}
