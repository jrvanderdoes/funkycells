% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/funkyModel.R
\name{funkyModel}
\alias{funkyModel}
\title{Fit a Random Forest model with PC data (Using CV for Improvements)}
\usage{
funkyModel(
  data,
  K = 10,
  outcome = colnames(data)[1],
  unit = colnames(data)[2],
  metaNames = NULL,
  synthetics = 100,
  alpha = 0.05,
  silent = FALSE,
  rGuessSims = 500,
  subsetPlotSize = 25,
  nTrees = 500,
  method = "class"
)
}
\arguments{
\item{data}{Data.frame of outcome and predictors (PCs and meta-variables).
Generally use the results from getKsPCAData, potentially with meta-
variables attached.}

\item{K}{(Optional) Numeric indicating the number of folds to use in K-fold
CV. The default is 10.}

\item{outcome}{(Optional) String indicating the outcome column name in data.
Default is the first column of data.}

\item{unit}{(Optional) String indicating the unit column name in data.
Default is the second column of data.}

\item{metaNames}{(Optional) Vector indicating the meta-variables to be
considered. Default is NULL.}

\item{synthetics}{(Optional)}

\item{alpha}{(Optional) Numeric in (0,1) indicating the significance used
throughout the analysis. Default is 0.05.#'}

\item{silent}{(Optional) Boolean indicating if output should be suppressed
when the function is running. Default is FALSE.}

\item{rGuessSims}{(Optional) Numeric value indicating the number of
simulations used for guessing and creating the guess estimate on the
plot. Default is 500.}

\item{subsetPlotSize}{(Optional) Numeric indicating the number of top
variables to include in a subset graph (note if there are less variables)
than this value indicates then no subset graph will be produced. Default
is 25.}

\item{nTrees}{(Optional) Numeric indicating the number of trees to use in the
random forest model. Default is 500.}

\item{method}{(Optional) Method for rpart tree to build random forest. Default
is "class".}
}
\value{
List with the following items:
\enumerate{
\item VariableImportance: Data.frame with the results of variable
importance indices from the models and CV. The columns are
var, est, and sd. The columns lower and upper are made with
significance alpha.
\item AccuracyEstimate: Data.frame with model accuracy estimates:
out-of-bag accuracy (OOB), biased estimate (bias), and
random guess (guess). The columns are OOB, bias, and guess.
\item NoiseCutoff: Numeric indicating noise cutoff (vertical line)
\item InterpolationCutoff: Vector of numerics indicating the
interpolation cutoff (curved line)
\item AdditionalParams: List of additional params for reference:
Alpha and subsetPlotSize.
\item viPlot: ggplot2 object for vi plot with standardized results.
It displays ordered underlying functions and meta-variables
with point estimates, sd, noise cutoff, and interpolation
cutoff all based on variable importance values
\item subset_viPlot: ggplot2 object for vi plot with standardized
results and only top subsetPlotSize variables. It displays
ordered underlying functions and meta-variables with point
estimates, sd, noise cutoff, and interpolation cutoff all
based on variable importance values
}
}
\description{
The function fits a random forest model to the data along with using cross-
validation to quantify variable importance. Warning, if there are no
synthetics, this may break (will fix it eventually).
}
\examples{

# Short Example
#   Parameters are reduced beyond recommended levels for speed
set.seed(1234)
rfcv <- funkyModel(
  data = TNBC[, c(1:8, ncol(TNBC))],
  outcome = "Class", unit = "Person",
  metaNames = c("Age"),
  nTrees = 50, synthetics = 10,
  silent = TRUE
)

\dontrun{
dat <- simulatePP(
  cellVarData =
    data.frame("stage" = c(0, 1), "A" = c(0, 0), "B" = c(1 / 50, 1 / 50)),
  cellKappaData = data.frame(
    "cell" = c("A", "B"),
    "clusterCell" = c(NA, "A"),
    "kappa" = c(20, 5)
  ),
  peoplePerStage = 50,
  imagesPerPerson = 1,
  silent = FALSE
)
pcaData <- getKsPCAData(dat,
  repeatedUniqueId = "Image",
  xRange = c(0, 1), yRange = c(0, 1), silent = FALSE
)
pcaMeta <- simulateMeta(pcaData,
  metaInfo = data.frame(
    "var" = c("randUnif", "randBin", "corrNorm"),
    "rdist" = c("runif", "rbinom", "rnorm"),
    "Stage_0" = c("0.5", "0.5", "1"),
    "Stage_1" = c("0.5", "0.5", "2")
  )
)
rfcv <- funkyModel(
  data = pcaMeta, outcome = "Stage", unit = "Person",
  metaNames = c("randUnif", "randBin", "corrNorm")
)

dat <- simulatePP(
  cellVarData =
    data.frame("stage" = c(0, 1), "A" = c(0, 0), "B" = c(1 / 50, 1 / 100)),
  cellKappaData = data.frame(
    "cell" = c("A", "B"),
    "clusterCell" = c(NA, "A"),
    "kappa" = c(20, 5)
  ),
  peoplePerStage = 20,
  imagesPerPerson = 3,
  silent = FALSE
)
pcaData <- getKsPCAData(dat,
  repeatedUniqueId = "Image",
  xRange = c(0, 1), yRange = c(0, 1), silent = FALSE
)
pcaMeta <- simulateMeta(pcaData,
  metaInfo = data.frame(
    "var" = c("randUnif", "randBin", "corrNorm"),
    "rdist" = c("runif", "rbinom", "rnorm"),
    "Stage_0" = c("0.5", "0.5", "1"),
    "Stage_1" = c("0.5", "0.5", "2")
  )
)
rfcv <- funkyModel(
  data = pcaMeta, outcome = "Stage", unit = "Person",
  metaNames = c("randUnif", "randBin", "corrNorm"),
  subsetPlotSize = 2
)
}

\dontrun{
set.seed(1234567)
dat <- simulatePP(
  cellVarData =
    data.frame(
      "stage" = c(0, 1),
      "A" = c(0, 0),
      "B" = c(1 / 50, 1 / 100)
    ),
  cellKappaData = data.frame(
    "cell" = c("A", "B"),
    "clusterCell" = c(NA, "A"),
    "kappa" = c(20, 5)
  ),
  peoplePerStage = 20,
  imagesPerPerson = 3,
  silent = FALSE
)
pcaData <- getKsPCAData(dat,
  repeatedUniqueId = "Image",
  xRange = c(0, 1), yRange = c(0, 1), silent = FALSE
)
pcaMeta <- simulateMeta(pcaData,
  metaInfo = data.frame(
    "var" = c("randUnif", "randBin", "corrNorm"),
    "rdist" = c("runif", "rbinom", "rnorm"),
    "Stage_0" = c("0.5", "0.5", "1"),
    "Stage_1" = c("0.5", "0.5", "2")
  )
)

rfcv1 <- funkyModel(
  data = pcaMeta, outcome = "Stage", unit = "Person",
  metaNames = c("randUnif", "randBin", "corrNorm"),
  nTrees = 10, synthetics = 25
)

rfcv2 <- funkyModel(
  data = pcaData, outcome = "Stage", unit = "Person",
  nTrees = 10, synthetics = 25
)

onlyMeta <- pcaMeta[, c("Stage", "Person", "randUnif", "randBin", "corrNorm")]
rfcv3 <- funkyModel(
  data = onlyMeta, outcome = "Stage", unit = "Person",
  metaNames = c("randUnif", "randBin", "corrNorm"),
  nTrees = 10, synthetics = 25
)
}
}
