% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RandomForest_CVPC.R
\name{.getVariableImportanceMetrics}
\alias{.getVariableImportanceMetrics}
\title{Get Variable Importance Metrics}
\usage{
.getVariableImportanceMetrics(
  avgGini,
  avgVI,
  oobAcc,
  outcomes,
  alpha = 0.05,
  rGuessSims = 500
)
}
\arguments{
\item{avgGini}{Data.frame obtained from CV sample of random forest. Columns
of var (K functions and metas, including synthetics) and average gini
index value from each CV random forest.
variable}

\item{avgVI}{Data.frame obtained from CV sample of random forest. Columns
of var (K functions and metas, including synthetics) and average variable
importance value from each CV random forest.}

\item{oobAcc}{Vector of numerics for out-of-bag accuracy from each fold.
Numerics are thus in (0,1).}

\item{outcomes}{Vector of the outcomes}

\item{alpha}{(Optional) Numeric in (0,1) indicating the significance for the
upper and lower values (quantiles).}

\item{rGuessSims}{(Optional) Numeric indicating the number of simulations
used in frequency based random guess approach.}
}
\value{
List with three elements:
1. giniData: Data.frame organizing the gini index metrics of the
variables. Columns var, avg, sd, lower, and upper.
2. viData: Data.frame organizing the variable importance index metrics of
the variables. Columns var, avg, sd, lower, and upper.
3. accData: Data.frame with the accuracy of various approaches. Column
OOB indicates the out-of-bag accuracy of the CV-RF. Column
bias is the accuracy of just selecting the most popular
option. Column guess is the accuracy from selecting a random
option, with probability based on frequency.
}
\description{
This (internal) function get the average values for each variable based on
the K folds using both the Gini index and the Variable Importance metric.
Also calculated is the accuracy data -- Out-of-box accuracy, bias
(strictly guess the most likely response), and guess (randomly guessing
based on the frequency in the training data).
}
\examples{
# See code for computeRandomForest_CVPC. This is not an outward function so
#     won't be viewable.
if(!is.null(oobAcc)){
  accData <- cbind(accData,data.frame('OOB'=mean(oobAcc)))
  #oobAccMeans <- mean(oobAcc)
  #oobAccSD <- sd(oobAcc)
  #accData <- data.frame('mean'=oobAccMeans,
                           #'sd'=oobAccSD,
                           #'lower'= oobAccMeans +qnorm(alpha) * oobAccSD/sqrt(length(oobAcc)),
                           #'upper'= oobAccMeans -qnorm(alpha) * oobAccSD/sqrt(length(oobAcc)))
}
}
