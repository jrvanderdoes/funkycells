[{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jrvanderdoes.github.io/funkycells/articles/funkycells.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"funkycells","text":"documents sample view funkycells. Every function examined throughout vignette, feel free see process beginning end jumping given step document. Although step funkycells process addressed, detailed information function left respective documentation.","code":"library(funkycells)"},{"path":"https://jrvanderdoes.github.io/funkycells/articles/funkycells.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"funkycells","text":"package interested investigating spatial data. Although potentially combined, raw form data interest (1) cell information (locations, patient, image, etc.) (2) meta-data (patient demographics, etc.). Rather loading data, generate data properties. cell data constructed using simulatePP(), given . look pictures using plotPP().  funkycells often explain cell interactions using \\(K\\) functions, although many functions feasible. example, K functions computed following function. However, funkyModel() use functions directly, principle components functions. commonness \\(K\\) functions, currently implemented steps function1. Although data, cellTypes single column, functions accepts cell properties defined many columns (see documentation getKsPCAData()). also note consider one-way interactions, simply improve model power. Upon data, attach meta information. example, data add gender (effect), age (effect).","code":"set.seed(123) cell_data <- simulatePP(   cellVarData =     data.frame(       \"stage\" = c(0, 1),       \"A\" = c(0, 0),       \"B\" = c(1 / 100, 1 / 500),       \"C\" = c(1 / 500, 1 / 250),       \"D\" = c(1 / 100, 1 / 100)     ),   cellKappaData =      data.frame(       \"cell\" = c(\"A\", \"B\", \"C\", \"D\"),       \"clusterCell\" = c(NA, \"A\", NA, NA),       \"kappa\" = c(20, 5, 15, 15)     ),   peoplePerStage = 40,   imagesPerPerson = 1,   silent = FALSE ) #> Stage: 0 (1/2) #> Stage: 1 (2/2) plotPP(cell_data[cell_data$Image==1,c('x','y','cellType')],        dropAxes = TRUE,        colorGuide = 'none',        xlim = c(0,1),        ylim = c(0,1)) k_data <- getKFunction(data=cell_data[cell_data$Person=='p1',-1],              agents = c('A','A'),              unit='Person',              repeatedUniqueId = 'Image',              rCheckVals = seq(0,0.25,0.01),              xRange = c(0,1),              yRange = c(0,1)) cells <- unique(cell_data$cellType) cells_interactions <- rbind(data.frame(t(combn(cells,2))),                             data.frame('X1'=cells,'X2'=cells))  pca_data <- getKsPCAData(   data = cell_data,    outcome = 'Stage',   unit = \"Person\",   repeatedUniqueId = 'Image',   rCheckVals = seq(0,0.25,0.01),   agents_df = cells_interactions,   xRange = c(0,1),  yRange = c(0,1),   nPCs = 3) #> PCA Pairs (10): 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 set.seed(123) pcaMeta <- simulateMeta(pca_data,                         outcome = 'Stage',                         metaInfo = data.frame(                            \"var\" = c(\"gender\", \"age\"),                            \"rdist\" = c(\"rbinom\", \"rnorm\"),                            \"Stage_0\" = c(\"0.5\", \"30\"),                            \"Stage_1\" = c(\"0.5\", \"31\"))                         )"},{"path":"https://jrvanderdoes.github.io/funkycells/articles/funkycells.html","id":"model","dir":"Articles","previous_headings":"","what":"Model","title":"funkycells","text":"now jump model. use funkyModel() employs cross-validation permutation create accurate models. variable importance plot returned. results model funkyModel() also includes model funkyModel() original data, necessary trying predict new data. Suppose create new people (.e. get data) wish predict. done follows.","code":"set.seed(123) model_fc <- funkyModel(data=pcaMeta,                        outcome = 'Stage',                        unit = 'Person',                        metaNames=c('gender','age')) model_fc$viPlot set.seed(12345) cell_data_pred <- simulatePP(   cellVarData =     data.frame(       \"stage\" = c(0, 1),       \"A\" = c(0, 0),       \"B\" = c(1 / 100, 1 / 500),       \"C\" = c(1 / 500, 1 / 250),       \"D\" = c(1 / 100, 1 / 100)     ),   cellKappaData =      data.frame(       \"cell\" = c(\"A\", \"B\", \"C\", \"D\"),       \"clusterCell\" = c(NA, \"A\", NA, NA),       \"kappa\" = c(20, 5, 15, 15)     ),   peoplePerStage = 2,   imagesPerPerson = 2,   silent = FALSE )  pca_data_pred <- getKsPCAData(   data = cell_data_pred,    outcome = 'Stage',   unit = \"Person\",   repeatedUniqueId = 'Image',   rCheckVals = seq(0,0.25,0.01),   agents_df = cells_interactions,   xRange = c(0,1),  yRange = c(0,1),   nPCs = 3)  set.seed(12345) pcaMeta_pred <- simulateMeta(pca_data_pred,                              outcome = 'Stage',                              metaInfo = data.frame(                                \"var\" = c(\"gender\", \"age\"),                                \"rdist\" = c(\"rbinom\", \"rnorm\"),                                \"Stage_0\" = c(\"0.5\", \"30\"),                                \"Stage_1\" = c(\"0.5\", \"31\"))                              )  predictions <- predict_funkyForest(model = model_fc$model, data_pred = pcaMeta_pred[-1])"},{"path":"https://jrvanderdoes.github.io/funkycells/articles/funkycells.html","id":"other-investigations","dir":"Articles","previous_headings":"","what":"Other Investigations","title":"funkycells","text":"also can compare K functions group.  can also consider ROC curves (Figure may shown due computational reasons).","code":"ab_stage0 <- getKFunction(cell_data[cell_data$Stage==0,-1],                     agents = c('A','B'),unit = 'Person',                          repeatedUniqueId = 'Image',                     rCheckVals = seq(0,0.25,0.01)) ab_stage1 <- getKFunction(cell_data[cell_data$Stage==1,-1],                      agents = c('A','B'),unit = 'Person',                          repeatedUniqueId = 'Image',                      rCheckVals = seq(0,0.25,0.01))  ab_stage0_long <- tidyr::pivot_longer(data = ab_stage0,cols = K1:K15) ab_stage1_long <- tidyr::pivot_longer(data = ab_stage1,cols = K1:K15)  data_k_plot <- rbind(data.frame('r'=ab_stage0_long$r,                               'K'=ab_stage0_long$value,                               'Unit'=ab_stage0_long$name,                               'Outcome'=\"0\"),                    data.frame('r'=ab_stage1_long$r,                               'K'=ab_stage1_long$value,                               'Unit'=paste0(ab_stage1_long$name,'_1'),                               'Outcome'=\"1\"))  plot_K_functions(data_k_plot) pred_roc <- predict_funkyForest(   model = model_fc$model,   data_pred = pcaMeta[-2],   data = pcaMeta[-2] ) computePseudoROCCurves(pcaMeta$Stage, pred_roc$PredPerc[-1])"},{"path":"https://jrvanderdoes.github.io/funkycells/articles/funkycells.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"funkycells","text":"many uses funkycells, hope gives taste current functionality aids understanding documentation provided.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeremy VanderDoes. Author, maintainer, copyright holder.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"VanderDoes J, Hywood J, Rice G (2023). “funkycells.” <Unpublished>, <Unpublished>(<Unpublished>), <Unpublished>. https://github.com/jrvanderdoes/funkycells.","code":"@Article{,   title = {funkycells},   author = {J. VanderDoes and J. Hywood and G. Rice},   journal = {},   year = {2023},   volume = {},   number = {},   pages = {},   url = {https://github.com/jrvanderdoes/funkycells}, }"},{"path":"https://jrvanderdoes.github.io/funkycells/index.html","id":"funkycells","dir":"","previous_headings":"","what":"Functional K Function Analysis of Multiplexed Images of Cells","title":"Functional K Function Analysis of Multiplexed Images of Cells","text":"term funkycells comes functional K function analysis multiplexed images cells. package organizes ways analyze cell relationships based (empirical) K functions. Approaches tailors different data sizes present packages encourage feedback improvements github repo. like understand use funkycells, recommend viewing vignette vignette(\"funkycells\"), available package website.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functional K Function Analysis of Multiplexed Images of Cells","text":"can install development version funkycells GitHub : Currently undergoing testing aim publish CRAN soon.","code":"install.packages(\"devtools\") devtools::install_github(\"jrvanderdoes/funkycells\")"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC.html","id":null,"dir":"Reference","previous_headings":"","what":"Triple Negative Breast Cancer Data — TNBC","title":"Triple Negative Breast Cancer Data — TNBC","text":"funky model ready set principle components K functions based triple negative breast cancer data patients. original data proteins coded T/F values. Additionally, age meta-variable added.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triple Negative Breast Cancer Data — TNBC","text":"","code":"TNBC"},{"path":[]},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC.html","id":"tnbc","dir":"Reference","previous_headings":"","what":"TNBC","title":"Triple Negative Breast Cancer Data — TNBC","text":"data frame 33 rows 1398 columns: Class Outcome patient Person Person image NA_Si_PC1 tumerYN_tumerYN_PC3 Principle components K functions named interactions age Meta-variable patient age","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Triple Negative Breast Cancer Data — TNBC","text":"https://www.angelolab.com/mibi-data","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC_Meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Triple Negative Breast Cancer Phenotypes — TNBC_Meta","title":"Triple Negative Breast Cancer Phenotypes — TNBC_Meta","text":"Data triple negative breast cancer biopsies patients, . Additionally, age meta-variable added.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC_Meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triple Negative Breast Cancer Phenotypes — TNBC_Meta","text":"","code":"TNBC_Meta"},{"path":[]},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC_Meta.html","id":"tnbc-meta","dir":"Reference","previous_headings":"","what":"TNBC_Meta","title":"Triple Negative Breast Cancer Phenotypes — TNBC_Meta","text":"data frame 33 rows 2 columns: Person Person image Age Meta-variable patient age","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC_Meta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Triple Negative Breast Cancer Phenotypes — TNBC_Meta","text":"https://www.angelolab.com/mibi-data","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC_pheno.html","id":null,"dir":"Reference","previous_headings":"","what":"Triple Negative Breast Cancer Phenotypes — TNBC_pheno","title":"Triple Negative Breast Cancer Phenotypes — TNBC_pheno","text":"Data triple negative breast cancer biopsies patients, . Additionally, age meta-variable added.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC_pheno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triple Negative Breast Cancer Phenotypes — TNBC_pheno","text":"","code":"TNBC_pheno"},{"path":[]},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC_pheno.html","id":"tnbc-pheno","dir":"Reference","previous_headings":"","what":"TNBC_pheno","title":"Triple Negative Breast Cancer Phenotypes — TNBC_pheno","text":"data frame 170,171 rows 5 columns: Class Outcome patient Person Person cell related cellx, celly x-y coordinates cell Phenotype classified phenotype cecll","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/TNBC_pheno.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Triple Negative Breast Cancer Phenotypes — TNBC_pheno","text":"https://www.angelolab.com/mibi-data","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/computePseudoROCCurves.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pseudo-ROC Curves — computePseudoROCCurves","title":"Compute Pseudo-ROC Curves — computePseudoROCCurves","text":"True ROC can computed two-options, can consider one right wrong overlay plots. Note means lines may cover ","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/computePseudoROCCurves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pseudo-ROC Curves — computePseudoROCCurves","text":"","code":"computePseudoROCCurves(trueOutcomes, modelPercents)"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/computePseudoROCCurves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pseudo-ROC Curves — computePseudoROCCurves","text":"trueOutcomes Vector true results modelPercents Data.frame columns named true outcomes, giving percent selecting outcome. returned predict.RandomForest_PC type='' look PredPerc[-1] (first column predictions).","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/computePseudoROCCurves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pseudo-ROC Curves — computePseudoROCCurves","text":"ggplot object ROC curves.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/computePseudoROCCurves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pseudo-ROC Curves — computePseudoROCCurves","text":"","code":"data_pp_roc <- simulatePP(   cellVarData =     data.frame(       \"stage\" = c(0, 1),       \"A\" = c(0, 0),       \"B\" = c(1 / 50, 1 / 50)     ),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\"),     \"clusterCell\" = c(NA, \"A\"),     \"kappa\" = c(20, 5)   ),   peoplePerStage = 10,   imagesPerPerson = 1,   silent = FALSE ) #> Stage: 0 (1/2) #> Stage: 1 (2/2) # Caution, in general use more than 5 nTrees (Default is 500) pcaData_roc <- getKsPCAData(data_pp_roc,   repeatedUniqueId = \"Image\",   xRange = c(0, 1), yRange = c(0, 1), silent = FALSE ) #> PCA Pairs (4): 1, 2, 3, 4 RF_roc <- funkyForest(data = pcaData_roc[-2], nTrees = 5) pred_roc <- predict_funkyForest(   model = RF_roc$model,   data_pred = pcaData_roc[-2],   data = pcaData_roc[-2] ) computePseudoROCCurves(pcaData_roc$Stage, pred_roc$PredPerc[-1])"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/diabetes.html","id":null,"dir":"Reference","previous_headings":"","what":"Diabetes Data — diabetes","title":"Diabetes Data — diabetes","text":"subset mass cytometry data diabetes patients.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/diabetes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diabetes Data — diabetes","text":"","code":"diabetes"},{"path":[]},{"path":"https://jrvanderdoes.github.io/funkycells/reference/diabetes.html","id":"diabetes","dir":"Reference","previous_headings":"","what":"diabetes","title":"Diabetes Data — diabetes","text":"data frame 253,777 rows 6 columns: Person ID person Image ID image x,y cooridinates cell cellType Classified cell type Stage Stage patient","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/diabetes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Diabetes Data — diabetes","text":"Currently, https://www.bioconductor.org/packages/release/bioc/html/spicyR.html Consider use https://data.mendeley.com/datasets/cydmwsfztj https://rdrr.io/github/BodenmillerGroup/imcdatasets/man/Damond_2019_Pancreas.html.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/diabetes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diabetes Data — diabetes","text":"Upcoming: Get complete data set","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Random Forest for Data with multiple PC (Along With Meta-Variables) — funkyForest","title":"Compute Random Forest for Data with multiple PC (Along With Meta-Variables) — funkyForest","text":"function creates random forest model data PCs meta-variables. includes proper combination variable importance. Recommend users use randomForest_CVPC general perhaps just final model","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Random Forest for Data with multiple PC (Along With Meta-Variables) — funkyForest","text":"","code":"funkyForest(   data,   outcome = colnames(data)[1],   unit = colnames(data)[2],   repeatedId = NULL,   nTrees = 500,   varImpPlot = TRUE,   metaNames = NULL,   keepModels = TRUE,   varSelPercent = 0.8,   method = \"class\" )"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Random Forest for Data with multiple PC (Along With Meta-Variables) — funkyForest","text":"data Data.frame outcome predictors (PCs meta-variables). Note, currently Unit repeated measures included. Generally use results getKsPCAData, potentially meta- variables attached. outcome (Optional) String indicating outcome column name data. Default first column data. unit (Optional) String indicating unit column name data. Default second column data. repeatedId (Optional) String indicating repeated measure column name data (present). Default NULL indicating repeated measures. nTrees (Optional) Numeric indicating number trees use random forest model. Default 500. varImpPlot (Optional) Boolean indicating variable importance plots also returned model. Default TRUE. metaNames (Optional) Vector column names data correspond metavariables. Default NULL. keepModels (Optional) Boolean indicating individual models kept. Can get large size. Default TRUE. varSelPercent Numeric (0,1) indicating (approx) percentage features keep tree. method (Optional) Method rpart tree build random forest. Default \"class\".","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Random Forest for Data with multiple PC (Along With Meta-Variables) — funkyForest","text":"list  entries varImportanceData: Data.frame variable importance information. (Optional) model: List CART builds random forest model. (Optional) varImportancePlot: Variable importance plots.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Random Forest for Data with multiple PC (Along With Meta-Variables) — funkyForest","text":"","code":"data <- simulatePP(   cellVarData =     data.frame(       \"stage\" = c(0, 1),       \"A\" = c(0, 0),       \"B\" = c(1 / 100, 1 / 500)     ),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\"),     \"clusterCell\" = c(NA, \"A\"),     \"kappa\" = c(6, 5)   ),   peoplePerStage = 5,   imagesPerPerson = 1 ) #> Stage: 0 (1/2) #> Stage: 1 (2/2) pcaData <- getKsPCAData(   data = data, repeatedUniqueId = \"Image\",   xRange = c(0, 1), yRange = c(0, 1) ) #> PCA Pairs (4): 1, 2, 3, 4 RF <- funkyForest(data = pcaData[-2])  if (FALSE) { data <- simulatePP(   cellVarData =     data.frame(       \"stage\" = c(0, 1),       \"A\" = c(0, 0),       \"B\" = c(1 / 100, 1 / 500),       \"C\" = c(1 / 500, 1 / 250),       \"D\" = c(1 / 100, 1 / 100),       \"E\" = c(1 / 500, 1 / 500)     ),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\", \"C\", \"D\", \"E\"),     \"clusterCell\" = c(NA, \"A\", \"B\", \"C\", NA),     \"kappa\" = c(6, 3, 2, 1, 4)   ),   peoplePerStage = 2,   imagesPerPerson = 1 ) pcaData <- getKsPCAData(   data = data, repeatedUniqueId = \"Image\",   xRange = c(0, 1), yRange = c(0, 1) ) RF1 <- funkyForest(data = pcaData[-2])  pcaMeta <- simulateMeta(pcaData) RF2 <- funkyForest(pcaMeta[-2],   metaNames = c(     \"randUnif\", \"randBin\", \"rNorm\",     \"corrUnif\", \"corrBin\", \"corrNorm\"   ) ) }"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Random Forest model with PC data (Using CV for Improvements) — funkyModel","title":"Fit a Random Forest model with PC data (Using CV for Improvements) — funkyModel","text":"function fits random forest model data along using cross- validation quantify variable importance. Warning, synthetics, may break (fix eventually).","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Random Forest model with PC data (Using CV for Improvements) — funkyModel","text":"","code":"funkyModel(   data,   K = 10,   outcome = colnames(data)[1],   unit = colnames(data)[2],   metaNames = NULL,   synthetics = 100,   alpha = 0.05,   silent = FALSE,   rGuessSims = 500,   subsetPlotSize = 25,   nTrees = 500,   method = \"class\" )"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Random Forest model with PC data (Using CV for Improvements) — funkyModel","text":"data Data.frame outcome predictors (PCs meta-variables). Generally use results getKsPCAData, potentially meta- variables attached. K (Optional) Numeric indicating number folds use K-fold CV. default 10. outcome (Optional) String indicating outcome column name data. Default first column data. unit (Optional) String indicating unit column name data. Default second column data. metaNames (Optional) Vector indicating meta-variables considered. Default NULL. synthetics (Optional) alpha (Optional) Numeric (0,1) indicating significance used throughout analysis. Default 0.05.#' silent (Optional) Boolean indicating output suppressed function running. Default FALSE. rGuessSims (Optional) Numeric value indicating number simulations used guessing creating guess estimate plot. Default 500. subsetPlotSize (Optional) Numeric indicating number top variables include subset graph (note less variables) value indicates subset graph produced. Default 25. nTrees (Optional) Numeric indicating number trees use random forest model. Default 500. method (Optional) Method rpart tree build random forest. Default \"class\".","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Random Forest model with PC data (Using CV for Improvements) — funkyModel","text":"List following items: VariableImportance: Data.frame results variable importance indices models CV. columns var, est, sd. columns lower upper made significance alpha. AccuracyEstimate: Data.frame model accuracy estimates: --bag accuracy (OOB), biased estimate (bias), random guess (guess). columns OOB, bias, guess. NoiseCutoff: Numeric indicating noise cutoff (vertical line) InterpolationCutoff: Vector numerics indicating interpolation cutoff (curved line) AdditionalParams: List additional params reference: Alpha subsetPlotSize. viPlot: ggplot2 object vi plot standardized results. displays ordered underlying functions meta-variables point estimates, sd, noise cutoff, interpolation cutoff based variable importance values subset_viPlot: ggplot2 object vi plot standardized results top subsetPlotSize variables. displays ordered underlying functions meta-variables point estimates, sd, noise cutoff, interpolation cutoff based variable importance values","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/funkyModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Random Forest model with PC data (Using CV for Improvements) — funkyModel","text":"","code":"if (FALSE) { dat <- simulatePP(   cellVarData =     data.frame(\"stage\" = c(0, 1), \"A\" = c(0, 0), \"B\" = c(1 / 50, 1 / 50)),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\"),     \"clusterCell\" = c(NA, \"A\"),     \"kappa\" = c(20, 5)   ),   peoplePerStage = 50,   imagesPerPerson = 1,   silent = FALSE ) pcaData <- getKsPCAData(dat,   repeatedUniqueId = \"Image\",   xRange = c(0, 1), yRange = c(0, 1), silent = FALSE ) pcaMeta <- simulateMeta(pcaData,   metaInfo = data.frame(     \"var\" = c(\"randUnif\", \"randBin\", \"corrNorm\"),     \"rdist\" = c(\"runif\", \"rbinom\", \"rnorm\"),     \"Stage_0\" = c(\"0.5\", \"0.5\", \"1\"),     \"Stage_1\" = c(\"0.5\", \"0.5\", \"2\")   ) ) rfcv <- funkyModel(   data = pcaMeta, outcome = \"Stage\", unit = \"Person\",   metaNames = c(\"randUnif\", \"randBin\", \"corrNorm\") )  dat <- simulatePP(   cellVarData =     data.frame(\"stage\" = c(0, 1), \"A\" = c(0, 0), \"B\" = c(1 / 50, 1 / 100)),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\"),     \"clusterCell\" = c(NA, \"A\"),     \"kappa\" = c(20, 5)   ),   peoplePerStage = 20,   imagesPerPerson = 3,   silent = FALSE ) pcaData <- getKsPCAData(dat,   repeatedUniqueId = \"Image\",   xRange = c(0, 1), yRange = c(0, 1), silent = FALSE ) pcaMeta <- simulateMeta(pcaData,   metaInfo = data.frame(     \"var\" = c(\"randUnif\", \"randBin\", \"corrNorm\"),     \"rdist\" = c(\"runif\", \"rbinom\", \"rnorm\"),     \"Stage_0\" = c(\"0.5\", \"0.5\", \"1\"),     \"Stage_1\" = c(\"0.5\", \"0.5\", \"2\")   ) ) rfcv <- funkyModel(   data = pcaMeta, outcome = \"Stage\", unit = \"Person\",   metaNames = c(\"randUnif\", \"randBin\", \"corrNorm\"),   subsetPlotSize = 2 ) }"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get K function — getKFunction","title":"Get K function — getKFunction","text":"function computes K function two agents unit, potentially averaging repeated measures.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get K function — getKFunction","text":"","code":"getKFunction(   data,   agents,   unit,   repeatedUniqueId = NULL,   rCheckVals = NULL,   xRange = NULL,   yRange = NULL,   edgeCorrection = \"isotropic\" )"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get K function — getKFunction","text":"data Dataframe column titles least x, y, agents, unit. consistency (avoiding errors), use order. Additionally, repeatedUniqueId can added. agents Two value vector indicating two agents use K function, first second. unit column. unit String column name data indicating unit base thing. Note unit may repeated measures. repeatedUniqueId (optional) String column name data indicating unique ID using repeated measures. rCheckVals (optional) numeric vector indicating radius check. Note, note specified, take lot memory, particularly many units repeated measures. xRange (optional) two value numeic vector indicating min max x values. Note re-used images. default just takes min max x image. allows different sized images, note edges defined cell. yRange (optional) two value numeic vector indicating min max y values. Note re-used images. default just takes min max y image. allows different sized images, note edges defined cell. edgeCorrection (optional) String indicating type edgeCorrection use spatStat computation K functions.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get K function — getKFunction","text":"data.frame first column checked radius rest relating K function unit points. K function computed, perhaps due lack data, NA returned K function.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get K function — getKFunction","text":"","code":"if (FALSE) { data1 <- simulatePP(   cellVarData =     data.frame(       \"stage\" = c(0, 1, 2),       \"A\" = c(0, 0, 0),       \"B\" = c(1 / 100, 1 / 500, 1 / 500)     ),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\"),     \"clusterCell\" = c(NA, \"A\"),     \"kappa\" = c(20, 5)   ) ) KData <- data1[data1$Person == \"p1\", colnames(data1) != \"Stage\"] KFunction <- getKFunction(   agents = c(\"A\", \"B\"), unit = \"Person\",   repeatedUniqueId = \"Image\",   data = KData,   rCheckVals = seq(0, 0.25, 0.01),   xRange = c(0, 1), yRange = c(0, 1),   edgeCorrection = \"isotropic\" ) plot(KFunction, type = \"l\") }  KFunction <- getKFunction(   agents = c(\"B\", \"Tumour\"), unit = \"Person\",   data = TNBC_pheno[TNBC_pheno$Person == 1, -1],   rCheckVals = seq(0, 50, 1),   edgeCorrection = \"isotropic\" ) plot(KFunction, type = \"l\")"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKsPCAData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get K's PCA Data — getKsPCAData","title":"Get K's PCA Data — getKsPCAData","text":"function computes K functions PP data converts PCs. Note, repeated measures, .e. multiple images per unit, K functions (weighted) averaged together based number agent1s.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKsPCAData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get K's PCA Data — getKsPCAData","text":"","code":"getKsPCAData(   data,   outcome = colnames(data)[1],   unit = colnames(data)[5],   repeatedUniqueId = NULL,   rCheckVals = NULL,   nPCs = 3,   agents_df = as.data.frame(expand.grid(unique(data[, 4]), unique(data[, 4]))),   xRange = NULL,   yRange = NULL,   edgeCorrection = \"isotropic\",   nbasis = 21,   silent = FALSE,   displayTVE = FALSE )"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKsPCAData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get K's PCA Data — getKsPCAData","text":"data Dataframe column titles least outcome, x, y, agents, unit. consistency (avoiding errors), use order. Additionally, repeatedUniqueId can added. outcome (Optional) String column name data indicating outcome response. Default 1st column. unit (Optional) String column name data indicating unit base thing. Note unit may repeated measures. Default 4th column. repeatedUniqueId (optional) String column name data indicating unique ID using repeated measures. rCheckVals (optional) numeric vector indicating radius check. Note, note specified, take lot memory, particularly many units repeated measures. nPCs (optional) Numeric indicating number principal components agents_df (optional) Two-column data.frame. first agents 1 second agent 2. data agents column. determines K functions compute. Default compute , may misspecified data different order. xRange (optional) two value numeic vector indicating min max x values. Note re-used images. default just takes min max x image. allows different sized images, note edges defined cell. yRange (optional) two value numeic vector indicating min max y values. Note re-used images. default just takes min max y image. allows different sized images, note edges defined cell. edgeCorrection (optional) String indicating type edgeCorrection use spatStat computation K functions. nbasis (optional) Numeric indicating number basis functions fit K functions order compute PCA. silent (optional) Boolean indicating progress printed displayTVE (Optional) Boolean  indicate total variance explained (TvE) displayed. Default FALSE.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKsPCAData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get K's PCA Data — getKsPCAData","text":"Data.frame outcome, unit principle components computed K functions.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/getKsPCAData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get K's PCA Data — getKsPCAData","text":"","code":"if (FALSE) { data <- simulatePP(   cellVarData =     data.frame(       \"stage\" = c(0, 1),       \"A\" = c(0, 0),       \"B\" = c(1 / 50, 1 / 50)     ),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\"),     \"clusterCell\" = c(NA, \"A\"),     \"kappa\" = c(20, 5)   ),   peoplePerStage = 100,   imagesPerPerson = 1,   silent = FALSE ) agents_df_tmp <- as.data.frame(expand.grid(   unique(data$cellType),   unique(data$cellType),   stringsAsFactors = FALSE )) dat_pca <- getKsPCAData(   data = data, outcome = \"Stage\", unit = \"Person\",   repeatedUniqueId = \"Image\",   rCheckVals = seq(0, 0.25, 0.01), nPCs = 3,   agents_df = agents_df_tmp,   xRange = c(0, 1), yRange = c(0, 1) ) }  dataPCA_pheno <- getKsPCAData(   data = TNBC_pheno, unit = \"Person\",   agents_df = data.frame(rep(\"B\",2), c(\"Tumour\",\"FAKE\")),   nPCs = 3,   rCheckVals = seq(0, 50, 1),   displayTVE = TRUE ) #> PCA Pairs (2): 1 (TVE: 0.997), 2"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plotPP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Spatial Point Process — plotPP","title":"Plot Spatial Point Process — plotPP","text":"function used plot spatial point process.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plotPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Spatial Point Process — plotPP","text":"","code":"plotPP(   data,   colorGuide = NULL,   ptSize = 1,   xlim = c(min(data[, 1]), max(data[, 1])),   ylim = c(min(data[, 2]), max(data[, 2])),   dropAxes = FALSE,   layerBasedOnFrequency = TRUE,   colors = NULL )"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plotPP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Spatial Point Process — plotPP","text":"data Data.frame x,y, agent type (order) colorGuide (Optional) String guides(color=) ggplot2. Usually NULL 'none' sufficient. Default NULL. ptSize (Optional) Numeric indicating point size. Default 1. xlim (Optional) Two value numeric vector indicating size region x-direction. Default c(min(x),max(x)). ylim (Optional) Two value numeric vector indicating size region y-direction. Default c(min(y),max(y)). dropAxes (Optional) Boolean indicating x, y axis title labels dropped. Default FALSE. layerBasedOnFrequency (Optional) Boolean indicating data layer based number cells type. Default TRUE. colors (Optional) Vector colors points. Default NULL, ggplot2 selected colors.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plotPP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Spatial Point Process — plotPP","text":"ggplot2 plot spatial point process.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plotPP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Spatial Point Process — plotPP","text":"","code":"plotPP(TNBC_pheno[TNBC_pheno$Person == 1, c(\"cellx\", \"celly\", \"Phenotype\")])  plotPP(diabetes[diabetes$Image == \"E37\", c(\"x\", \"y\", \"cellType\")])"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plot_K_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare K Functions Between Outcomes — plot_K_functions","title":"Compare K Functions Between Outcomes — plot_K_functions","text":"Compare K Functions Outcomes","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plot_K_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare K Functions Between Outcomes — plot_K_functions","text":"","code":"plot_K_functions(data, inc.legend = TRUE, inc.noise = FALSE)"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plot_K_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare K Functions Between Outcomes — plot_K_functions","text":"data Data.frame columns r, K, Unit, Outcome. r indicates radius checked K function, K indicates K function value, Unit specifies unique K function, Outcome indicates unit outcome. inc.legend (Optional) Boolean indicating legend given. also include numbers indicate K functions missing. default TRUE. inc.noise (Optional) Boolean indicating gray, dashed line included show total noise like. default FALSE.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plot_K_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare K Functions Between Outcomes — plot_K_functions","text":"ggplot2 object showing K function superimposed average","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/plot_K_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare K Functions Between Outcomes — plot_K_functions","text":"","code":"# Example 1 tmp <- getKFunction(TNBC_pheno[TNBC_pheno$Class==0,-1],                     agents = c('Tumour','Tumour'),                     unit = 'Person',                     rCheckVals = seq(0,50,1)) tmp1 <- getKFunction(TNBC_pheno[TNBC_pheno$Class==1,-1],                      agents = c('Tumour','Tumour'),                      unit = 'Person',                      rCheckVals = seq(0,50,1)) tmp_1 <- tidyr::pivot_longer(data = tmp,cols = K1:K18) tmp1_1 <- tidyr::pivot_longer(data = tmp1,cols = K1:K15)  data_plot <- rbind(data.frame('r'=tmp_1$r,                               'K'=tmp_1$value,                               'Unit'=tmp_1$name,                               'Outcome'=\"0\"),                    data.frame('r'=tmp1_1$r,                               'K'=tmp1_1$value,                               'Unit'=paste0(tmp1_1$name,'_1'),                               'Outcome'=\"1\"))  plot_K_functions(data_plot)   # Example 2 tmp <- getKFunction(TNBC_pheno[TNBC_pheno$Class==0,-1],                     agents = c('Tumour','B'),unit = 'Person',                     rCheckVals = seq(0,50,1)) tmp1 <- getKFunction(TNBC_pheno[TNBC_pheno$Class==1,-1],                      agents = c('Tumour','B'),unit = 'Person',                      rCheckVals = seq(0,50,1))  tmp_1 <- tidyr::pivot_longer(data = tmp,cols = K1:K18) tmp1_1 <- tidyr::pivot_longer(data = tmp1,cols = K1:K15)  data_plot <- rbind(data.frame('r'=tmp_1$r,                               'K'=tmp_1$value,                               'Unit'=tmp_1$name,                               'Outcome'=\"0\"),                    data.frame('r'=tmp1_1$r,                               'K'=tmp1_1$value,                               'Unit'=paste0(tmp1_1$name,'_1'),                               'Outcome'=\"1\"))  plot_K_functions(data_plot)"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/predict_funkyForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Using funkyForest — predict_funkyForest","title":"Predict Using funkyForest — predict_funkyForest","text":"function gets predicted value funkyForest model.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/predict_funkyForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Using funkyForest — predict_funkyForest","text":"","code":"predict_funkyForest(model, data_pred, type = \"all\", data = NULL)"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/predict_funkyForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Using funkyForest — predict_funkyForest","text":"model funkyForest model. See funkyForest. list CART models rpart. data_pred data.frame data predicted. type (Optional) String indicating type analysis. Options pred . choice changes return best fit intended use. data (Optional) data.frame full data. data used fit model extracted (row name) determine data model knows.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/predict_funkyForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Using funkyForest — predict_funkyForest","text":"returned data depends type: type='pred': returns vector predictions type='': returns vector predictions","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/predict_funkyForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Using funkyForest — predict_funkyForest","text":"","code":"data_pp <- simulatePP(   cellVarData =     data.frame(       \"stage\" = c(0, 1),       \"A\" = c(0, 0),       \"B\" = c(1 / 50, 1 / 50)     ),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\"),     \"clusterCell\" = c(NA, \"A\"),     \"kappa\" = c(10, 5)   ),   peoplePerStage = 5,   imagesPerPerson = 1,   silent = FALSE ) #> Stage: 0 (1/2) #> Stage: 1 (2/2) pcaData <- getKsPCAData(data_pp,   repeatedUniqueId = \"Image\",   xRange = c(0, 1), yRange = c(0, 1), silent = FALSE ) #> PCA Pairs (4): 1, 2, 3, 4 RF <- funkyForest(data = pcaData[-2], nTrees = 5) # pred <- predict_funkyForest(   model = RF$model, type = \"all\",   data_pred = pcaData[-2],   data = pcaData[-2] )"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulateMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Meta Variables — simulateMeta","title":"Simulate Meta Variables — simulateMeta","text":"function simulates meta-variables append pca data.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulateMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Meta Variables — simulateMeta","text":"","code":"simulateMeta(   pcaData,   outcome = colnames(pcaData)[1],   metaInfo = data.frame(var = c(\"randUnif\", \"randBin\", \"rNorm\", \"corrUnif\", \"corrBin\",     \"corrNorm\"), rdist = c(\"runif\", \"rbinom\", \"rnorm\", \"runif\", \"rbinom\", \"rnorm\"),     Stage_0 = c(\"0.5\", \"0.5\", \"1\", \"0.5\", \"0.6\", \"1\"), Stage_1 = c(\"0.5\", \"0.5\", \"1\",     \"0.75\", \"0.65\", \"1.5\"), Stage_2 = c(\"0.5\", \"0.5\", \"1\", \"0.95\", \"0.75\", \"1.5\")) )"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulateMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Meta Variables — simulateMeta","text":"pcaData Data.frame outcome, unit principle components computed K functions. outcome (Optional) Column title outcome pcaData. metaInfo (Optional) Data.frame indicating metavariables include. data.frame var column, rdist column, columns outcome. var column names meta-variables, rdist indicates distribution (options runif, rbinom, rnorm), outcome. column gives expected value (must positive) random variables outcome. order allow designation expected values, following rules imposed distribution: runif: =0, b modified, rbinom: n=1, defines probability runif: standard deviation set 1","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulateMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Meta Variables — simulateMeta","text":"Data.frame outcome, unit, principle components computed K functions, meta-variables. pcaData appended appended columns end.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulateMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Meta Variables — simulateMeta","text":"Notes: runif may induce useless information recommend correlating ","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulateMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Meta Variables — simulateMeta","text":"","code":"data <- simulatePP(   cellVarData = data.frame(     \"stage\" = c(0, 1, 2),     \"A\" = c(0, 0, 0),     \"B\" = c(1 / 100, 1 / 500, 1 / 1000)   ),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\"),     \"clusterCell\" = c(NA, \"A\"),     \"kappa\" = c(10, 3)   ),   peoplePerStage = 5,   imagesPerPerson = 1 ) #> Stage: 0 (1/3) #> Stage: 1 (2/3) #> Stage: 2 (3/3) pcaData <- getKsPCAData(   data = data, repeatedUniqueId = \"Image\",   xRange = c(0, 1), yRange = c(0, 1) ) #> PCA Pairs (4): 1, 2, 3, 4 pcaMeta <- simulateMeta(pcaData)"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulatePP.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Point Processes — simulatePP","title":"Simulate a Point Processes — simulatePP","text":"function simulates point pattern optional clustering ( visible invisible). Multiple outcomes, people, repeated measure possible.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulatePP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Point Processes — simulatePP","text":"","code":"simulatePP(   cellVarData = data.frame(stage = c(0, 1, 2), A = c(0, 0, 0), B = c(1/100, 1/500,     1/500), C = c(1/500, 1/250, 1/100), D = c(1/100, 1/100, 1/100), E = c(1/500, 1/500,     1/500), F = c(1/250, 1/250, 1/250)),   cellKappaData = data.frame(cell = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), clusterCell = c(NA,     \"A\", \"B\", \"C\", NA, \"A\"), kappa = c(20, 5, 4, 2, 15, 5)),   peoplePerStage = 20,   imagesPerPerson = 5,   silent = FALSE )"},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulatePP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Point Processes — simulatePP","text":"cellVarData (Optional) Data.frame describing variances agent type. data.frame stage column named column agent type. Currently, names mandatory. cellKappaData (Optional) Data.frame describing cell interactions. data.frame cell column giving agent names (matching cellVarData), clusterCell column indicating agent agent clusters (put NA agent cluster clusters hidden agent / self-clusters), kappa column directing number agents per image. peoplePerStage (Optional) Numeric indicating number units per outcome. imagesPerPerson (Optional) Numeric indicating number repeated measures. silent (Optional) Boolean indicating progress output printed.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulatePP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Point Processes — simulatePP","text":"Data.frame containing point defined patterns. data.frame columns outcome, x coordinate, y coordinate, agent type, unit, unique repeated measure id.","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulatePP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Point Processes — simulatePP","text":"Upcoming: cellVarData unnamed. Rename general names (agent, unit, etc.)","code":""},{"path":"https://jrvanderdoes.github.io/funkycells/reference/simulatePP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Point Processes — simulatePP","text":"","code":"if (FALSE) { data <- simulatePP() } data <- simulatePP(   cellVarData = data.frame(     \"stage\" = c(0, 1),     \"A\" = c(0, 0),     \"B\" = c(1 / 100, 1 / 500),     \"C\" = c(1 / 500, 1 / 250),     \"D\" = c(1 / 100, 1 / 100),     \"E\" = c(1 / 500, 1 / 500)   ),   cellKappaData = data.frame(     \"cell\" = c(\"A\", \"B\", \"C\", \"D\", \"E\"),     \"clusterCell\" = c(NA, \"A\", \"B\", \"C\", NA),     \"kappa\" = c(10, 3, 2, 1, 8)   ),   peoplePerStage = 4,   imagesPerPerson = 1 ) #> Stage: 0 (1/2) #> Stage: 1 (2/2)"}]
